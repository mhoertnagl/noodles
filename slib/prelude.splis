(do
  ;; TODO: (println ...)

  ;; `fun` provides a macro to streamline function definition.
  ;; Instead of defining the not-function the conventional way
  ;;
  ;; ```(def not (fn [x] (if x false true)))```
  ;;
  ;; one can leverage `defn` to achief a mor concise definition:
  ;;
  ;; ```(defn not [x] (if x false true))```
  ;;
  ;; @sym   name  The name of the function.
  ;; @(sym) args  The list of arument symbols.
  ;; @(any) body  The body of the function.
  (defmacro defn
    (fn [name args body]
      `(def ~name (fn ~args ~body)) ))

  ;; `use` reads, parses and evaluates a splis source file.
  ;;
  ;; @str path  The path to a splis source file.
  (defn use [path]
    (eval (parse (read-file path))))

  ;; `nil?` returns true if and only if `x` is `nil`.
  ;;
  ;; @any x  A value.
  ;; @return [bool] `true` iff `x` is `nil`.
  (defn nil? [x] (= x nil))

  ;; `true?` returns true if and only if `x` is the boolean `true`.
  ;;
  ;; @any x  A value.
  ;; @return [bool] `true` iff `x` is the boolean `true`.
  (defn true? [x] (= x true))

  ;; `false?` returns true if and only if `x` is the boolean `false`.
  ;;
  ;; @any x  A value.
  ;; @return [bool] `true` iff `x` is the boolean `false`.
  (defn false? [x] (= x false))

  ;; `not` returns `false` if `x` is truthy; `true` otherwise.
  ;;
  ;; @any x  A value.
  ;; @return [bool] `false` if `x` is truthy; `true` otherwise.
  (defn not [x] (if x false true))

  ;; `inc` increments the number `n` by one.
  ;;
  ;; @num n  A number.
  ;; @return [num] `n + 1`.
  (defn inc [n] (+ n 1))

  ;; `dec` decrements the number `n` by one.
  ;;
  ;; @num n  A number.
  ;; @return [num] `n - 1`.
  (defn dec [n] (- n 1))

  ;; `pos?` returns `true` if the value `n` is greater than `0`; `false`
  ;; otherwise.
  ;;
  ;; @num n  A number.
  ;; @return [bool] `true` if `n` is positive; `true` otherwise.
  (defn pos? [n] (> n 0))

  ;; `abs` computes the absolute value of `n`.
  ;;
  ;; @num n  A number.
  ;; @return [num] The absolute value `|n|`.
  (defn abs [n]
    (if (pos? n)
      n
      (- n)))

  ;; `range` returns the list of numbers from `start` (inclusive) to `end`
  ;; (exclusive). If `start >= end` it will return the empty list.
  ;; `step` denotes the increment added to `start` until it is greater or equal
  ;; to `end`.
  ;;
  ;; @num start  The start number (included).
  ;; @num end    The end number (excluded).
  ;; @num step   The increment step size.
  ;; @return [(num)] The sequence of numbers from `a` up to `b`.
  (defn range [start end step]
    (if (>= start end)
      ()
      (:: start (range (+ start step) end step))))

  ;; `irange` returns the list of integers from `start` (inclusive) to `end`
  ;; (exclusive). If `start >= end` it will return the empty list.
  ;; This is the same as `(range start end 1)`.
  ;;
  ;; @num start  The start number (included).
  ;; @num end    The end number (excluded).
  ;; @return [(num)] The sequence of integers from `a` up to `b`.
  (defn irange [start end] (range start end 1))

  ;; `map` applies a function of one argument to each element of a list and
  ;; returns a list of the application results in the same order as the
  ;; elements.
  ;;
  ;; @fun(T)any f   A unary function.
  ;; @(T)       xs  A list of elements.
  ;; @return  The list of elements applied to the unary function individually.
  (defn map [f xs]
    (if (empty? xs)
      xs ; Will preserve the type of the sequence.
         ; TODO: clojure uses mapv for vectors.
      (:: (f (head xs)) (map f (tail xs)))))

  ;; TODO: Document.
  (defn reduce [f b xs]
    (if (empty? xs)
      b
      (reduce f (f b (head xs)) (tail xs))))

  ; (defn reduce-right [f b xs]
  ;   (if (empty? xs)
  ;     b
  ;     (f b (reduce f (head xs) (tail xs)))))

  ;; TODO: Doc.
  (defn sum [xs] (reduce + 0 xs))

  ;; TODO: Doc.
  (defn prod [xs] (reduce * 1 xs))

  ;; (defn even? [n])
  ;; (defn odd? [n])
  ;; (defn filter [p xs])
  ;; (defn all [p xs])
  ;; (defn any [p xs])
  ;; (defn flat-map [p xs])
  ;; (defn reverse [xs])
  ;; (defn drop [n xs])
  ;; (defn take [n xs])
  ;; (defn drop-while [p xs])
  ;; (defn take-while [p xs])
  ;; (defn zip-with [f xs ys])
  ;; (defn zip [xs ys])
  ;; (defn repeat [n v])
)
