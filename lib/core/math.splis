;; Provides common math-related operations.
(do
  ;; TODO: Doc.
  (def *PI* 3.141592653589793)

  ;; `inc` increments the number `n` by one.
  ;;
  ;; @param  num n  A number.
  ;; @return num    `n + 1`.
  (defn inc [n] (+ n 1))

  ;; `dec` decrements the number `n` by one.
  ;;
  ;; @param  num n  A number.
  ;; @return num    `n - 1`.
  (defn dec [n] (- n 1))

  ;; `pos?` returns `true` if the value `n` is greater than `0`; `false`
  ;; otherwise.
  ;;
  ;; @param  num  n  A number.
  ;; @return bool    `true` if `n` is positive; `false` otherwise.
  (defn pos? [n] (> n 0))

  ;; `even?` tests if a number is even.
  ;;
  ;; @param  num  n  A number.
  ;; @return bool    `true` iff `n` is even.
  (defn even? [n] (= (mod n 2) 0))

  ;; `odd?` tests if a number is odd.
  ;;
  ;; @param  num  n  A number.
  ;; @return bool    `true` iff `n` is odd.
  (defn odd? [n] (= (mod n 2) 1))

  ;; `abs` computes the absolute value of `n`.
  ;;
  ;; @param  num n  A number.
  ;; @return num    The absolute value `|n|`.
  (defn abs [n] (if (pos? n) n (- n)))

  ;; `sum` computes the sum of all elements of `xs`. Returns `0` if `xs` is the
  ;; empty list.
  ;;
  ;; @param  (num) xs  A list of numbers.
  ;; @return num       The sum of all values in `xs`.
  (defn sum [xs] (reduce + 0 xs))

  (defn sumv [& xs] (sum xs))

  ;; `prod` computes the product of all elements of `xs`. Returns `1` if `xs` is
  ;; the empty list.
  ;;
  ;; @param  (num) xs  A list of numbers.
  ;; @return num       The product of all values in `xs`.
  (defn prod [xs] (reduce * 1 xs))

  (defn prodv [& xs] (prod xs))

  (defn minimum [xs] (fold (fn [a b] (if (< a b) a b)) xs))

  (defn minimumv [& xs] (minimum xs))

  (defn maximum [xs] (fold (fn [a b] (if (> a b) a b)) xs))

  (defn maximumv [& xs] (maximum xs))

  (defn average [xs] (/ (sum xs) (count xs)))

  (defn averagev [& xs] (average xs))
)
