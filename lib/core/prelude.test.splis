(do
  (use "core/prelude")

  (test "increment 0" 1 (inc 0))
  (test "increment 1" 2 (inc 1))
  (test "increment negative number" 0 (inc (- 1)))

  (test ".+ 0" 0 (.+))
  (test ".+ 1" 1 (.+ 1))
  (test ".+ 1 2 3 4 5" 15 (.+ 1 2 3 4 5))

  (test "sum [1 2 3 4 5]" 15 (sum [1 2 3 4 5]))

  (test "prod [1 2 3 4 5]" 120 (prod [1 2 3 4 5]))

  (test "even? 0" true (even? 0))
  (test "even? 1" false (even? 1))

  (test "range '(+ ~x 2) 0 5" [0 2 4] (range '(+ ~x 2) 0 5))

  (test "irange 1 5" [1 2 3 4] (irange 1 5))

  (test "map 0" [[0] [0 1] [0 1 2]] (map (fn [x] (irange 0 x)) [1 2 3]))

  (test "flat-map 0" [0 0 1 0 1 2] (flat-map (fn [x] (irange 0 x)) [1 2 3]))

  (test "filter even? [1 2 3 4 5 6]" [2 4 6] (filter even? [1 2 3 4 5 6]))

  (test "remove even? [1 2 3 4 5 6]" [1 3 5] (remove even? [1 2 3 4 5 6]))

  (test "all odd? [1 3 5]" true (all odd? [1 3 5]))
  (test "all odd? [1 3 4]" false (all odd? [1 3 4]))

  (test "any odd? [2 3 4]" true (any odd? [2 3 4]))
  (test "any odd? [2 4 6]" false (any odd? [2 4 6]))

  (test "reverse [1 2 3 4]" [4 3 2 1] (reverse [1 2 3 4]))

  (test "take 3 [1 2 3 4 5]" [1 2 3] (take 3 [1 2 3 4 5]))

  (test "zip [1 2 3] [9 8 7]" [[1 9] [2 8] [3 7]] (zip [1 2 3] [9 8 7]))

  (test "minimum 1 2 3 4 5" 1 (minimum 1 2 3 4 5))

  (test "maximum 1 2 3 4 5" 5 (maximum 1 2 3 4 5))

  (test "average 1 2 3 4 5" 3 (average 1 2 3 4 5))
)
