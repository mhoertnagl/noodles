(do
  ;; `fun` provides a macro to streamline function definition.
  ;; Instead of defining the not-function the conventional way
  ;;
  ;; ```(def not (fn [x] (if x false true)))```
  ;;
  ;; one can leverage `defn` to achief a more concise definition:
  ;;
  ;; ```(defn not [x] (if x false true))```
  ;;
  ;; @param sym   name  The name of the function.
  ;; @param (sym) args  The list of arument symbols.
  ;; @param (any) body  The body of the function.
  (defmacro defn [name args body] (def name (fn args body)))

  ;; `nil?` returns true if and only if `x` is `nil`.
  ;;
  ;; @param  any x  A value.
  ;; @return bool   `true` iff `x` is `nil`.
  ; (defn nil? [x] (= x nil))

  ;; `true?` returns true if and only if `x` is the boolean `true`.
  ;;
  ;; @param  any x  A value.
  ;; @return bool  `true` iff `x` is the boolean `true`.
  ; (defn true? [x] (= x true))

  ;; `false?` returns true if and only if `x` is the boolean `false`.
  ;;
  ;; @param  any x  A value.
  ;; @return bool  `true` iff `x` is the boolean `false`.
  ; (defn false? [x] (= x false))

  ;; `not` returns `false` if `x` is truthy; `true` otherwise. `not` is an
  ;; alias for `false?`.
  ;;
  ;; @param  any  x  A value.
  ;; @return bool    `false` if `x` is truthy; `true` otherwise.
  ; (def not false?)

  ;; `else` is an alias for the boolean atom `true`. Used in `cond` expressions
  ;; to denote the default branch.
  ; (def else true)

  ;; `identity` returns the argument itself.
  ;;
  ;; @param  any x  Any argument.
  ;; @return any    `x` itself.
  (defn identity [x] x)
  ; (defmacro identity [x] x)

  ;; `empty?` returns the number of elements in the vector `xs`.
  ;;
  ;; @param  (any) xs  A vector of elements.
  (defn empty? [xs] (= (len xs) 0))

  ;; `range` returns the list of numbers from `start` (inclusive) to `end`
  ;; (exclusive). If `start >= end` it will return the empty list.
  ;; `step` denotes the increment added to `start` until it is greater or equal
  ;; to `end`.
  ;;
  ;; @param  num start  The start number (included).
  ;; @param  num end    The end number (excluded).
  ;; @param  num step   The increment step size.
  ;; @return (num)      The sequence of numbers from `a` up to `b`.
  (defn range [start end step]
    (if (>= start end)
      ()
      (:: start (range (+ start step) end step))))

  ;; `irange` returns the list of integers from `start` (inclusive) to `end`
  ;; (exclusive). If `start >= end` it will return the empty list.
  ;; This is the same as `(range start end 1)`.
  ;;
  ;; @param  num start  The start number (included).
  ;; @param  num end    The end number (excluded).
  ;; @return (num)      The sequence of integers from `a` up to `b`.
  (defn irange [start end] (range start end 1))

  ;; `map` applies a function of one argument to each element of a list and
  ;; returns a list of the application results in the same order as the
  ;; elements.
  ;;
  ;; @param  fun(T)S f   A unary function.
  ;; @param  (T)     xs  A list of elements.
  ;; @return (S)         The list of elements applied to the unary function
  ;;                     individually.
  (defn map [f xs]
    (if (empty? xs)
      xs ; Will preserve the type of the sequence.
      (:: (f (head xs)) (map f (tail xs)))))

  ; (defn flat-map [p xs]
  ;   (if (empty? xs)
  ;     ()
  ;     (::: (f (head xs)) (map f (tail xs)))))

  ;; `reduce` reduces a sequence of elements into a single element by successive
  ;; application of the binary function `f` in a left-associative fashion where
  ;; `b` is the initial value.
  ;; If the list is empty, `reduce` will return `b`.
  ;;
  ;; @param  fun(T S)T f   A binary function.
  ;; @param  T         b   The initial value.
  ;; @param  (S)       xs  A list of elements.
  ;; @return T             The left-associative reduction of `xs` into a single
  ;;                       element.
  (defn reduce [f b xs]
    (if (empty? xs)
      b
      (reduce f (f b (head xs)) (tail xs))))

  ; (defn reduce-right [f b xs]
  ;   (if (empty? xs)
  ;     b
  ;     (f b (reduce f (head xs) (tail xs)))))

  (defn fold [f xs]
    (if (empty? xs)
      nil ; TODO: Throw error.
      (reduce f (head xs) (tail xs)) ))

  ; (defn filter [p xs]
  ;   (cond (empty? xs) xs
  ;         (p (head xs)) (:: (head xs) (filter p (tail xs)))
  ;         else (filter p (tail xs)) ))

  ; (defn remove [p xs] (filter (fn [x] (not (p x))) xs))

  ; (defn all [p xs]
  ;   (cond (empty? xs) true
  ;         (not (p (head xs))) false
  ;         else (all p (tail xs)) ))

  ; (defn any [p xs]
  ;   (cond (empty? xs) false
  ;         (p (head xs)) true
  ;         else (any p (tail xs)) ))
  ;; (defn reverse [xs])

  ; (defn drop [n xs]
  ;   (cond
  ;     (empty? xs) xs
  ;     (<= n 0) xs
  ;     else (drop (- n 1) (tail xs)) ))

  ; (defn take [n xs]
  ;   (cond
  ;     (empty? xs) xs
  ;     (<= n 0) ()
  ;     else (:: (head xs) (take (- n 1) (tail xs))) ))

  ; (defn drop-while [p xs]
  ;   (cond
  ;     (empty? xs) xs
  ;     (p (head xs)) (drop-while p (tail xs))
  ;     else xs ))

  ; (defn take-while [p xs]
  ;   (cond
  ;     (empty? xs) xs
  ;     (p (head xs)) (:: (head xs) (take-while p (tail xs)))
  ;     else () ))

  ;; (defn zip-with [f xs ys])
  ;; (defn zip [xs ys])

  ; (defn repeat [n v]
  ;   (if (<= n 0)
  ;     ()
  ;     (:: v (repeat (- n 1) v)) ))

  ;; (defn flatten [xs])
  (use "core/math")
  ; (use "core/io")
)
